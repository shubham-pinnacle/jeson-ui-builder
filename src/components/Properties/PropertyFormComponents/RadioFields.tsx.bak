import {
  Stack,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Autocomplete,
  Checkbox,
  FormControlLabel,
  Box,
  Typography,
  Button,
  List,
  ListItemText,
  ListItemSecondaryAction,
  IconButton,
} from "@mui/material";
import CheckBoxOutlineBlankIcon from "@mui/icons-material/CheckBoxOutlineBlank";
import CheckBoxIcon from "@mui/icons-material/CheckBox";
import { FaTimes } from "react-icons/fa";
import { FieldRendererProps } from "./FieldRendererProps";
import { useEffect, useState } from "react";
import { PropertyOptions } from "../PropertiesFormStyles";
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from "../../../store";
import { Option, PropertyOption, addOption, setOptions, setSelectedProperties, initComponentState } from "../../../slices/componentOptionsSlice";

export default function RadioFields(props: FieldRendererProps) {
  const { component, fieldValues, handleFieldChange, onPropertyChange } = props;
  
  // Define a shorter name for onPropertyChange for convenience
  const h = onPropertyChange;
  
  // Initialize options display state - this is just used for rendering the dropdown
  const [initOptions, setInitOptions] = useState<string[]>([]);
  
  // Using PropertyOption imported from componentOptionsSlice.ts
  
  const dispatch = useDispatch();
  
  // Initialize Redux for this component if needed
  useEffect(() => {
    dispatch(initComponentState({ componentId: component.id }));
  }, [component.id, dispatch]);
  
  // Get this component's state from Redux
  const componentState = useSelector((state: RootState) => 
    state.componentOptions[component.id] || { options: [], selectedProperties: [] }
  );
  
  // Extract options and selectedProperties from component state
  const componentOptions = componentState.options;
  const selectedOptions = componentState.selectedProperties;

  // This effect syncs component.properties["data-source"] with Redux store on component mount/change
  useEffect(() => {
    // First, just log what's happening for debugging
    console.log(`>>> Component selected: ${component?.id}`);
    
    if (component && component.properties) {
      // Get existing options from component properties
      const dataSource = Array.isArray(component.properties["data-source"]) 
        ? [...component.properties["data-source"]] 
        : [];
      
      console.log(`>>> Component ${component.id} data-source:`, dataSource);
      console.log(`>>> Redux store options for ${component.id}:`, componentOptions);
        
      // Only initialize Redux if component has data but Redux doesn't yet have it stored
      if (dataSource.length > 0 && componentOptions.length === 0) {
        // Use setTimeout to avoid blocking the UI thread during component selection
        setTimeout(() => {
          console.log(`>>> Initializing Redux for ${component.id} with:`, dataSource);
          dispatch(setOptions({
            componentId: component.id,
            options: dataSource
          }));
        }, 100);
      }
    }
  }, [component?.id, dispatch, componentOptions]);
  
  // Update component properties from Redux data when options change
  useEffect(() => {
    // Only update component properties if there are real options
    if (componentOptions && componentOptions.length > 0) {
      // Update the init options display
      setInitOptions(componentOptions.map((opt: Option) => opt.title));
      console.log(`Options for component ${component.id} retrieved from Redux:`, componentOptions);
      
      // Check if the current component properties data-source differs from Redux
      // This prevents unnecessary updates that might interfere with component selection
      const currentDataSource = component.properties["data-source"] || [];
      const needsUpdate = JSON.stringify(currentDataSource) !== JSON.stringify(componentOptions);
      
      if (needsUpdate) {
        // Safely update with a slight delay to avoid interfering with component selection
        setTimeout(() => {
          h("data-source", [...componentOptions]);
          console.log(`Synced Redux options back to component ${component.id} properties`);
        }, 100);
      }
    } else {
      // If no options, just set empty init options
      setInitOptions([]);
    }
  }, [componentOptions, component.id, h]);
  
  // Log the component ID to help track which component we're working with
  useEffect(() => {
    console.log(`Radio component selected: ${component.id}`);
    console.log(`Component data-source for ${component.id}:`, component.properties["data-source"]);
    console.log(`Component options in Redux for ${component.id}:`, componentOptions);
  }, [component.id, componentOptions]);

  const handleChange = (prop: string, value: any) => h(prop, value);

  const saveOptionsToRedux = () => {
    // Get values from form fields
    const title = component.properties?.newOption || "";
    const id = fieldValues[`id_id`] || "";
    const description = fieldValues[`description_description`] || "";
    const metadata = fieldValues[`metadata_metadata`] || "";
    
    // Check if at least title or ID field has a value
    if (!title.trim() && !id.trim()) {
      // Don't add empty options to the array
      console.log("Title or ID is required. Option not added.");
      return;
    }
    
    // Create the new option with sanitized data
    const newOption: Option = {
      id: id.trim() || title.trim().toLowerCase().replace(/\s+/g, "_"), // Use ID if provided, otherwise use sanitized title
      title: title.trim() || id.trim(), // Use title if provided, otherwise use ID
    };
    
    // Only add non-empty values
    if (description.trim()) {
      newOption.description = description.trim();
    }
    
    if (metadata.trim()) {
      newOption.metadata = { value: metadata.trim() };
    }

    // Get component ID for the update
    const componentId = component.id;
    console.log(`Adding option to component ${componentId}`);
    
    // Dispatch action to add the option to this specific component in Redux
    dispatch(addOption({
      componentId,
      option: newOption
    }));
    
    console.log(`Added option to Redux store for component ${componentId}:`, newOption);
    
    // Clear the title/newOption field
    handleChange("newOption", "");

    // Only clear fields after successful addition
    selectedOptions.forEach((opt) => {
      const key = `${opt.title}_${opt.title}`;
      handleFieldChange(key, ""); // reset each field to empty string
    });
  };

  useEffect(() => {
    console.log("selectedOptions for component", component.id, selectedOptions);
    // selectedOptions are now component-specific and maintained in Redux
  }, [component.id, selectedOptions]);

  // 1) Normalize your "options" (the radio/checkbox choices) into an array:
  const rawOptions = component.properties?.options;
  const optionsArray: any[] = Array.isArray(rawOptions)
    ? rawOptions
    : typeof rawOptions === "string"
    ? (() => {
        try {
          const p = JSON.parse(rawOptions);
          return Array.isArray(p) ? p : [];
        } catch {
          return [];
        }
      })()
    : [];

  // 2) Build an array of { id, title } for your Autocomplete:
  const propertyOptions = optionsArray.map((opt) =>
    typeof opt === "object"
      ? { id: opt.id, title: opt.title }
      : { id: opt, title: opt }
  );



  const icon = <CheckBoxOutlineBlankIcon fontSize="small" />;
  const checkedIcon = <CheckBoxIcon fontSize="small" />;

  return (
    <Stack spacing={2}>
      {/* Label, Description, Output Variable */}
      <TextField
        label="Label"
        required
        fullWidth
        size="small"
        value={component.properties?.label || ""}
        onChange={(e) => handleChange("label", e.target.value)}
      />
      {component.type !== "drop-down" && (
        <TextField
          label="Description (Optional)"
          fullWidth
          size="small"
          value={component.properties?.description || ""}
          onChange={(e) => handleChange("description", e.target.value)}
        />
      )}
      <TextField
        label="Output Variable"
        required
        fullWidth
        size="small"
        value={component.properties?.outputVariable || ""}
        onChange={(e) => handleChange("outputVariable", e.target.value)}
      />

<Autocomplete
        multiple
        id="checkboxes-tags-demo"
        options={PropertyOptions}
        disableCloseOnSelect
        getOptionLabel={(option) => option.title}
        onChange={(event, newValue) => {
          // When properties are selected from Autocomplete, update Redux
          dispatch(setSelectedProperties({
            componentId: component.id,
            properties: newValue as PropertyOption[]
          }));
        }}
        renderOption={(props, option, { selected }) => {
          const { key, ...optionProps } = props;
          return (
            <li key={key} {...optionProps}>
              <Checkbox
                icon={icon}
                checkedIcon={checkedIcon}
                style={{ marginRight: 8 }}
                checked={selected}
              />
              {option.title}
            </li>
          );
        }}
        renderInput={(params) => (
          <TextField
            {...params}
            label="Properties (optional)"
            
            size="small"

      {/* === For each selected property, show ID / Description / Metadata checkbox === */}

      {/* === OPTIONS: add / list your actual radio options === */}

      {/* === INIT VALUE DROPDOWN (only the user-added options) === */}
      <FormControl fullWidth size="small">
        <InputLabel>Init Value (Optional)</InputLabel>
        <Select
          value={component.properties?.initValue || ""}
          onChange={(e) => handleChange("initValue", e.target.value)}
          label="Init Value (Optional)"
        >
          {initOptions.length === 0 ? (
            <MenuItem value="">
              <em></em>
            </MenuItem>
          ) : (
            initOptions.map((opt: any, index: number) => {
              const title = typeof opt === "object" ? opt.title : opt;
              return (
                <MenuItem key={index} value={title}>
                  {title}
                </MenuItem>
              );
            })
          )}
        </Select>
      </FormControl>

      {/* === Standard toggles === */}
      <FormControl fullWidth size="small">
        <InputLabel>Required</InputLabel>
        <Select
          label="Required"
          value={component.properties?.required || "false"}
          onChange={(e) => handleChange("required", e.target.value)}
        >
          <MenuItem value="true">True</MenuItem>
          <MenuItem value="false">False</MenuItem>
        </Select>
      </FormControl>

      <FormControl fullWidth size="small">
        <InputLabel>Visible</InputLabel>
        <Select
          label="Visible"
          value={component.properties?.visible || "true"}
          onChange={(e) => handleChange("visible", e.target.value)}
        >
          <MenuItem value="true">True</MenuItem>
          <MenuItem value="false">False</MenuItem>
        </Select>
      </FormControl>

      <FormControl fullWidth size="small">
        <InputLabel>Enabled</InputLabel>
        <Select
          label="Enabled"
          value={component.properties?.enabled || "true"}
          onChange={(e) => handleChange("enabled", e.target.value)}
        >
          <MenuItem value="true">True</MenuItem>
          <MenuItem value="false">False</MenuItem>
        </Select>
      </FormControl>

      {component.type === "check-box" && (
        <>
          <TextField
            label="Min-Selected-Items (Optional)"
            type="number"
            fullWidth
            size="small"
            value={component.properties?.minSelectedItems || ""}
            onChange={(e) =>
              handleChange("minSelectedItems", e.target.value)
            }
          />
          <TextField
            label="Max-Selected-Items (Optional)"
            type="number"
            fullWidth
            size="small"
            value={component.properties?.maxSelectedItems || ""}
            onChange={(e) =>
              handleChange("maxSelectedItems", e.target.value)
            }
          />
        </>
      )}
    </Stack>
  );
}
